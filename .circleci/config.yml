version: 2.1

orbs:
  circle-compare-url: iynere/compare-url@0.1.2

jobs:
  generate_dockerfiles:
    working_directory: ~/repo
    docker:
      - image: gcc:7
    steps:
      - checkout
      - run:
          name: Generate Dockerfiles
          command: make -j
      - run:
          name: Prepare Artifacts
          command: |
            mkdir /tmp/dockerfiles
            find . -name Dockerfile -type f | grep -v shared | xargs -I{} cp -v --parents {} /tmp/dockerfiles
      - store_artifacts:
          path: /tmp/dockerfiles
          destination: Dockerfiles
      # upload Dockerfiles to circleci-public/circleci-dockerfiles repo
      - add_ssh_keys:
          fingerprints:
            - "af:0a:93:75:51:75:1f:16:90:d9:97:b1:7a:bb:f0:27"
      - run:
          name: git config
          command: |
            git config --global user.email "$CIRCLE_USERNAME@users.noreply.github.com"
            git config --global user.name "$CIRCLE_USERNAME"
      - run: git clone git@github.com:CircleCI-Public/circleci-dockerfiles.git
      # only push Dockerfiles to github on circleci-images pushes to "staging" or "master"
      - run:
          name: branch control flow & git push
          working_directory: circleci-dockerfiles
          command: |
            if [[ "$CIRCLE_BRANCH" == "master" ]]
            then
              export DOCKERFILES_BRANCH=master
            fi
            if [[ "$CIRCLE_BRANCH" == "staging" ]]
            then
              export DOCKERFILES_BRANCH=staging
            fi
            if [ ! -e $DOCKERFILES_BRANCH ]
            then
              git checkout $DOCKERFILES_BRANCH
              cp -rfv /tmp/dockerfiles/* ~/repo/circleci-dockerfiles
              git add .
              git commit --allow-empty -m "Dockerfiles from $CIRCLE_BUILD_URL"
              git push -f origin $DOCKERFILES_BRANCH
            fi

  generate_automated_build_images:
    working_directory: ~/repo
    docker:
      - image: gcc:7
    steps:
      - checkout
      - run:
          name: Generate Dockerfiles, READMEs for automated builds
          command: |
            make -j
            make example_images
      - store_artifacts:
          path: /tmp/example-images
      - add_ssh_keys:
          fingerprints:
            - "9c:e2:cf:bb:f2:25:4d:05:d9:b0:30:bf:73:c5:7d:8f"
      - run:
          name: git config
          command: |
            git config --global user.email "$CIRCLE_USERNAME@users.noreply.github.com"
            git config --global user.name "$CIRCLE_USERNAME"

      - run: git clone git@github.com:CircleCI-Public/example-images.git

      # only push example Dockerfiles/READMEs to GitHub on circleci-images pushes to "staging" or "master"
      - run:
          name: branch control flow & git push
          working_directory: example-images
          command: |
            if [[ "$CIRCLE_BRANCH" == "master" ]]
            then
              export EXAMPLE_IMAGES_BRANCH=master
            fi
            if [[ "$CIRCLE_BRANCH" == "staging" ]]
            then
              export EXAMPLE_IMAGES_BRANCH=staging
            fi
            if [ ! -e $EXAMPLE_IMAGES_BRANCH ]
            then
              git checkout $EXAMPLE_IMAGES_BRANCH
              cp -rfv /tmp/example-images/* ~/repo/example-images
              git add .
              git commit --allow-empty -m "example images from $CIRCLE_BUILD_URL"
              git push -f origin $EXAMPLE_IMAGES_BRANCH
            fi

  refresh_tools_cache:
    docker:
      - image: circleci/python:3.6.6 # aws cli dependenncy pyaml does not yet support 3.7 - https://github.com/aws/aws-cli/issues/3427
    steps:
      - checkout
      - run: sudo pip install awscli==1.14.17
      - run: cd ./shared/images; ./refresh-tools-cache

  publish_image: &publish_image
    machine: true
    working_directory: ~/circleci-bundles
    steps:
      - checkout
      - run:
          name: Docker Login
          command: docker login -u $DOCKER_USER -p $DOCKER_PASS

      - circle-compare-url/reconstruct

      - run:
          name: only proceed if `$PLATFORM` or `shared` or `Makefile` were modified (unless we're on master)
          command: |
            set -u

            # save value stored in file to a local env var
            CIRCLE_COMPARE_URL=$(cat CIRCLE_COMPARE_URL.txt)

            # borrowed from https://discuss.circleci.com/t/does-circleci-2-0-work-with-monorepos

            COMMIT_RANGE=$(echo $CIRCLE_COMPARE_URL | sed 's:^.*/compare/::g')
            echo "Commit range: $COMMIT_RANGE"

            git diff $COMMIT_RANGE --name-status

            if [[ ! $(git diff $COMMIT_RANGE --name-status | grep -e "$PLATFORM" -e "shared" -e "Makefile") && "$CIRCLE_BRANCH" != "master" ]]; then
              circleci step halt
            fi

      - run:
          name: Build and Publish Images
          command: |
            export COMPUTED_ORG=ccistaging
            if [[ "$CIRCLE_BRANCH" == "master" ]]
            then
              export COMPUTED_ORG=circleci
            fi
            export NEW_ORG=${NEW_ORG:-$COMPUTED_ORG}

            make -j $PLATFORM/publish_images
      - store_artifacts:
          path: "."
          destination: circleci-bundles

  publish_android:
    <<: *publish_image
    environment:
      - PLATFORM: android

  publish_buildpack-deps:
    <<: *publish_image
    parallelism: 4
    environment:
      - PLATFORM: buildpack-deps

  publish_clojure:
    <<: *publish_image
    environment:
      - PLATFORM: clojure

  publish_dynamodb:
    <<: *publish_image
    environment:
      - PLATFORM: dynamodb

  publish_elixir:
    <<: *publish_image
    environment:
      - PLATFORM: elixir

  publish_golang:
    <<: *publish_image
    parallelism: 2
    environment:
      - PLATFORM: golang

  publish_jruby:
    <<: *publish_image
    environment:
      - PLATFORM: jruby

  publish_mariadb:
    <<: *publish_image
    environment:
      - PLATFORM: mariadb

  publish_mongo:
    <<: *publish_image
    environment:
      - PLATFORM: mongo

  publish_mysql:
    <<: *publish_image
    environment:
      - PLATFORM: mysql

  publish_node:
    <<: *publish_image
    environment:
      - PLATFORM: node

  publish_openjdk:
    <<: *publish_image
    environment:
      - PLATFORM: openjdk

  publish_php:
    <<: *publish_image
    parallelism: 6
    environment:
      - PLATFORM: php

  publish_postgres:
    <<: *publish_image
    environment:
      - PLATFORM: postgres

  publish_python:
    <<: *publish_image
    parallelism: 3
    environment:
      - PLATFORM: python

  publish_redis:
    <<: *publish_image
    environment:
      - PLATFORM: redis

  publish_ruby:
    <<: *publish_image
    parallelism: 2
    environment:
      - PLATFORM: ruby

  publish_rust:
    <<: *publish_image
    environment:
      - PLATFORM: rust

workflow_filters: &workflow_filters
  requires:
    - refresh_tools_cache
  filters:
    branches:
      only:
        - staging
        - master

workflows:
  version: 2
  build_test_deploy:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - generate_dockerfiles
      - refresh_tools_cache:
          requires:
            - generate_dockerfiles
          filters:
            branches:
              only:
                - staging
                - master
      - publish_android:  *workflow_filters
      - publish_node:     *workflow_filters
      - publish_python:   *workflow_filters
      - publish_ruby:     *workflow_filters
      - publish_golang:   *workflow_filters
      - publish_php:      *workflow_filters
      - publish_redis:    *workflow_filters
      - publish_postgres: *workflow_filters
      - publish_mariadb:  *workflow_filters
      - publish_mysql:    *workflow_filters
      - publish_mongo:    *workflow_filters
      - publish_elixir:   *workflow_filters
      - publish_jruby:    *workflow_filters
      - publish_clojure:  *workflow_filters
      - publish_openjdk:  *workflow_filters
      - publish_dynamodb:     *workflow_filters
      - publish_rust:     *workflow_filters
      - publish_buildpack-deps:   *workflow_filters
  commit:
    jobs:
      - generate_dockerfiles
      - generate_automated_build_images:
          requires:
            - generate_dockerfiles
          filters:
            branches:
              only:
                - staging
                - master
      - refresh_tools_cache:
          requires:
            - generate_dockerfiles
          filters:
            branches:
              only:
                - staging
                - master
      - publish_android:  *workflow_filters
      - publish_node:     *workflow_filters
      - publish_python:   *workflow_filters
      - publish_ruby:     *workflow_filters
      - publish_golang:   *workflow_filters
      - publish_php:      *workflow_filters
      - publish_redis:    *workflow_filters
      - publish_postgres: *workflow_filters
      - publish_mariadb:  *workflow_filters
      - publish_mysql:    *workflow_filters
      - publish_mongo:    *workflow_filters
      - publish_elixir:   *workflow_filters
      - publish_jruby:    *workflow_filters
      - publish_clojure:  *workflow_filters
      - publish_openjdk:  *workflow_filters
      - publish_rust:     *workflow_filters
      - publish_dynamodb:     *workflow_filters
      - publish_buildpack-deps:   *workflow_filters
