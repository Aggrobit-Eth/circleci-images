FROM {{BASE_IMAGE}}

ENV PGUSER $POSTGRES_USER
ENV POSTGIS_VERSION 2.3

RUN if which apt-get > /dev/null ; then \
      apt-get update \
      && apt-get install -y --no-install-recommends \
           postgis \
      && rm -rf /var/lib/apt/lists/* \
    else \
      apk add --no-cache --virtual .fetch-deps \
          ca-certificates \
          openssl \
          tar \
      \
      && wget -O postgis.tar.gz "https://github.com/postgis/postgis/archive/$POSTGIS_VERSION.tar.gz" \
      && mkdir -p /usr/src/postgis \
      && tar \
          --extract \
          --file postgis.tar.gz \
          --directory /usr/src/postgis \
          --strip-components 1 \
      && rm postgis.tar.gz \
      \
      && apk add --no-cache --virtual .build-deps \
          autoconf \
          automake \
          g++ \
          json-c-dev \
          libtool \
          libxml2-dev \
          make \
          perl \
      \
      && apk add --no-cache --virtual .build-deps-testing \
          --repository http://dl-cdn.alpinelinux.org/alpine/edge/testing \
          gdal-dev \
          geos-dev \
          proj4-dev \
      && cd /usr/src/postgis \
      && ./autogen.sh \
  # configure options taken from:
  # https://anonscm.debian.org/cgit/pkg-grass/postgis.git/tree/debian/rules?h=jessie
      && ./configure \
  #       --with-gui \
      && make \
      && make install \
      && apk add --no-cache --virtual .postgis-rundeps \
          json-c \
      && apk add --no-cache --virtual .postgis-rundeps-testing \
          --repository http://dl-cdn.alpinelinux.org/alpine/edge/testing \
          geos \
          gdal \
          proj4 \
      && cd / \
      && rm -rf /usr/src/postgis \
      && apk del .fetch-deps .build-deps .build-deps-testing
    fi

# Create the 'template_postgis' template db
RUN "${psql[@]}" <<- 'EOSQL' \
  CREATE DATABASE template_postgis; \
  UPDATE pg_database SET datistemplate = TRUE WHERE datname = 'template_postgis'; \
  EOSQL \
  \
  # Load PostGIS into both template_database and $POSTGRES_DB \
  for DB in template_postgis "$POSTGRES_DB"; do \
    echo "Loading PostGIS extensions into $DB" \
    "${psql[@]}" --dbname="$DB" <<-'EOSQL' \
      CREATE EXTENSION IF NOT EXISTS postgis; \
      CREATE EXTENSION IF NOT EXISTS postgis_topology; \
      CREATE EXTENSION IF NOT EXISTS fuzzystrmatch; \
      CREATE EXTENSION IF NOT EXISTS postgis_tiger_geocoder; \
  EOSQL \
  done

# Load PostGIS into both template_database and $POSTGRES_DB
RUN for DB in template_postgis "$POSTGRES_DB"; do \
    echo "Updating PostGIS extensions $DB to $POSTGIS_VERSION" \
    psql --dbname="$DB" -c " \
        -- Upgrade PostGIS (includes raster) \
        ALTER EXTENSION postgis  UPDATE TO '$POSTGIS_VERSION'; \
        -- Upgrade Topology \
        ALTER EXTENSION postgis_topology UPDATE TO '$POSTGIS_VERSION'; \
        -- Upgrade US Tiger Geocoder \
        ALTER EXTENSION postgis_tiger_geocoder UPDATE TO '$POSTGIS_VERSION'; \
    " \
  done

ENV PGDATA /dev/shm/pgdata/data
